package controllers

import (
	sequence "golang/internal/services/sequenceService"
	"net/http"

	"github.com/gin-gonic/gin"
)

type SequenceController struct {
	service sequence.SequenceServiceI
}

func NewSequenceController(service sequence.SequenceServiceI) *SequenceController {
	return &SequenceController{service: service}
}

// UploadCSVFile uploads a CSV file.
// @Summary Upload CSV file
// @Description Uploads a CSV file containing transactions
// @Tags transactions
// @Accept multipart/form-data
// @Produce application/json
// @Param file formData file true "CSV file"
// @Success 200 {object} apierror.SuccessResponse
// @Failure 400 {object} apierror.ErrorResponse
// @Failure 500 {object} apierror.ErrorResponse
// @Router /transactions/upload [post]
func (c *SequenceController) AnalyzeDNASeq(ctx *gin.Context) {
	file, header, err := ctx.Request.FormFile("file")
	if err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	defer file.Close()

	if header.Header.Get("Content-Type") != "application/octet-stream" {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": "Invalid file type. Please upload a TXT file"})
		return
	}

// 	gcContent, err := c.service.Create(models.Sequence{})
// 
// 	if err != nil {
// 		ctx.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
// 		return
// 	}
// 
// 	ctx.JSON(http.StatusOK, gin.H{"gcContent": gcContent})
}

// // AlignSequences handles the alignment of DNA sequences from a JSON request body.
// func (c *SequenceController) AlignSequences(ctx *gin.Context) {
// 	// Define a struct to hold the request data
// 	type RequestBody struct {
// 		Sequence1 string `json:"sequence1" binding:"required"`
// 		Sequence2 string `json:"sequence2" binding:"required"`
// 	}

// 	var requestBody RequestBody

// 	// Bind the JSON body to the RequestBody struct
// 	if err := ctx.ShouldBindJSON(&requestBody); err != nil {
// 		ctx.JSON(http.StatusBadRequest, gin.H{"error": "Invalid request body"})
// 		return
// 	}

// 	// Extract sequences from the request body
// 	seq1 := requestBody.Sequence1
// 	seq2 := requestBody.Sequence2

// 	// Process the sequences (e.g., align them)
// 	alignedSeq1, alignedSeq2, err := c.service.AlignSequences(seq1, seq2)
// 	if err != nil {
// 		ctx.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
// 		return
// 	}

// 	// Return the aligned sequences
// 	ctx.JSON(http.StatusOK, gin.H{
// 		"alignedSequence1": alignedSeq1,
// 		"alignedSequence2": alignedSeq2,
// 	})
// }
